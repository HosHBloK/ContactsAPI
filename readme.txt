Пояснения к реализации:

Пункты 2 и 3 технического задания я понял так, что при создании пользователя мы указываем только его контактные данные, такие как имя, email и телефон (email и телефон это уникальные поля для каждого), и затем мы можем опционально добавить детальную информацию (фамилия, отчество, дата рождения), которая обособлена от контактной. Также мы можем обновить отдельно контактную и детальную информацию, а при удалении детальной информации пользователя стирается только фамилия, отчеcтво, и дата рождения, без удаления самого пользователя.

В качестве типа авторизации я выбрал JWT, так как он отлично подходит для микросервисной архитектуры, позволяя не хранить сессию пользователя на каждом сервисе отдельно, и мне нравится использовать именно данный способ.

В качестве СУБД я использовал postgreSQL, как рекомендовано в техническом задании, поэтому для работы приложения необходимо указать в файле application.properties путь до ПУСТОЙ базы данных, и данные для подключения к ней. Таблицы создадутся автоматически при запуске приложения. 

В пункте 1 технического задания указана только реализация авторизации, без регистрации, поэтому при запуске приложения автоматически создается пользователь "admin", с помощью которого можно выполнить авторизацию.

Добавление\обновление фотографии пользователя я реализовал через multipart form-data.

Исходя из выбора JWT, для тестирования сервиса с помощью Postman, необходимо получить токен с помощью запроса "Login", и вставить его в импортированной коллекции Postman во вкладку "Auth", в поле "Token", чтобы автоматически добавить его к каждому запросу, не указывая его вручную в "headers".